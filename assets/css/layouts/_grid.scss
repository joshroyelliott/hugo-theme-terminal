// Base container for all panel groups
.panels-container {
  display: flex;
  flex-direction: column;
  flex: 1; /* Take all available space within main */
  padding-top: 1rem;
  min-height: 0; /* Allow it to shrink if needed */
  height: 100%; /* Fill available space */
  // overflow: hidden; /* Prevent overflow from pushing footer down */
}

/* Add a special class we can apply to main for single page content that should scroll normally */
main.page-scrollable {
  overflow-y: auto; /* Allow normal page scrolling */
  overflow-x: hidden;
 
  /* Remove constraints from child content */
  .panels-container {
    overflow: visible;
    height: auto;
  }

  /* Reset panel scroll behavior for normal article flow */
  .panel {
    overflow: visible;
    max-height: none;
   
    &__content {
      overflow: visible;
    }
  }
}

// Standardized panel spacing variables from _variables.scss
$panel-gap: $spacing-sm;
$panel-margin: 0; // No margin for panel groups

// ===================================================
// STANDARD GRID LAYOUTS
// ===================================================

// Base grid class for all panel layouts with consistent spacing
%panel-grid-base {
  display: grid;
  row-gap: $spacing-md;
  column-gap: $spacing-sm;
  margin: $panel-margin;
  min-height: 0;
  // height: 100%; /* Fill the container height */
  // grid-template-rows: minmax(0, 1fr); /* Crucial for proper height behavior */
}

// Grid layouts that can be applied to any panel group
// Two equal columns (standard layout)
.grid-2col {
  @extend %panel-grid-base;
  grid-template-columns: repeat(2, 1fr);
  
  @media (max-width: $breakpoint-md) {
    grid-template-columns: 1fr;
  }
}

// Three equal columns
.grid-3col {
  @extend %panel-grid-base;
  grid-template-columns: repeat(3, 1fr);
  
  @media (max-width: $breakpoint-lg) {
    grid-template-columns: repeat(2, 1fr);
  }
  
  @media (max-width: $breakpoint-md) {
    grid-template-columns: 1fr;
  }
}

// Four equal columns
.grid-4col {
  @extend %panel-grid-base;
  grid-template-columns: repeat(4, 1fr);
  
  @media (max-width: $breakpoint-xl) {
    grid-template-columns: repeat(3, 1fr);
  }
  
  @media (max-width: $breakpoint-lg) {
    grid-template-columns: repeat(2, 1fr);
  }
  
  @media (max-width: $breakpoint-md) {
    grid-template-columns: 1fr;
  }
}

// Main content with sidebar (1:2 ratio)
.grid-main-sidebar {
  @extend %panel-grid-base;
  grid-template-columns: 1fr 2fr;
  grid-template-rows: minmax(0, 1fr); /* Ensures the row can shrink and expand within container */
  
  @media (max-width: $breakpoint-md) {
    grid-template-columns: 1fr;
  }
}

// Sidebar with main content (1:2 ratio)
.grid-sidebar-main {
  @extend %panel-grid-base;
  grid-template-columns: 2fr 1fr;
  grid-template-rows: minmax(0, 1fr); /* Ensures the row can shrink and expand within container */
  
  @media (max-width: $breakpoint-md) {
    grid-template-columns: 1fr;
  }
}

// Two columns with first column wider (2:1 ratio)
.grid-wide-narrow {
  @extend %panel-grid-base;
  grid-template-columns: 2fr 1fr;
  
  @media (max-width: $breakpoint-md) {
    grid-template-columns: 1fr;
  }
}

// Two columns with second column wider (1:2 ratio)
.grid-narrow-wide {
  @extend %panel-grid-base;
  grid-template-columns: 1fr 2fr;
  
  @media (max-width: $breakpoint-md) {
    grid-template-columns: 1fr;
  }
}

// Auto-fit responsive grid (good for collections of similar panels)
.grid-auto-fit {
  @extend %panel-grid-base;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
}

// ===================================================
// SPECIFIC LAYOUT PATTERNS
// ===================================================

// Interactive panel layout (with named grid areas)
.interactive-panels {
  @extend %panel-grid-base;
  // Define grid areas for different panel types using specific layouts
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-template-rows: auto auto minmax(0, 1fr); /* Auto for tab and scroll, flexible for list/preview */
  grid-template-areas: 
    "tab tab"
    "scroll scroll"
    "list preview";
  
  // Assign grid areas to the specific panel types
  .panel--tab {
    grid-area: tab;
  }
  
  .panel--scroll:not(.panel--list) {
    grid-area: scroll;
  }
  
  .panel--list {
    grid-area: list;
  }
  
  .panel--preview {
    grid-area: preview;
  }
  
  // Mobile response for the interactive panels
  @media (max-width: $breakpoint-md) {
    grid-template-columns: 1fr;
    grid-template-rows: auto auto auto minmax(0, 1fr); /* Auto for tab, scroll, list, flexible for preview */
    grid-template-areas: 
      "tab"
      "scroll"
      "list"
      "preview";
  }
}

// List page specific layout (for blog/projects lists)
.list-layout {
  @extend %panel-grid-base;
  grid-template-columns: minmax(300px, 1fr) 2fr;
  grid-template-rows: minmax(0, 1fr); /* Ensures the row can shrink and expand within container */
  
  @media (max-width: $breakpoint-md) {
    grid-template-columns: 1fr;
  }
}

// ===================================================
// TILING WINDOW MANAGER INSPIRED LAYOUTS
// ===================================================

// Master and stack layout (1 large panel on left, stacked panels on right)
.grid-master-stack {
  @extend %panel-grid-base;
  grid-template-columns: 2fr 1fr;
  
  // Right stack of panels
  .stack {
    display: grid;
    grid-template-columns: 1fr;
    row-gap: $spacing-md;
  }
  
  @media (max-width: $breakpoint-md) {
    grid-template-columns: 1fr;
  }
}

// Three-column layout with adjustable ratios (can be used for complex layouts)
.grid-thirds {
  @extend %panel-grid-base;
  grid-template-columns: 1fr 1fr 1fr;
  
  // Allow panels to span multiple columns using utility classes
  .span-2 {
    grid-column: span 2;
  }
  
  .span-3 {
    grid-column: span 3;
  }
  
  @media (max-width: $breakpoint-lg) {
    grid-template-columns: 1fr 1fr;
    
    .span-3 {
      grid-column: span 2;
    }
  }
  
  @media (max-width: $breakpoint-md) {
    grid-template-columns: 1fr;
    
    .span-2, .span-3 {
      grid-column: span 1;
    }
  }
}

// Monocle layout (full width panels stacked vertically)
.grid-monocle {
  @extend %panel-grid-base;
  grid-template-columns: 1fr;
}
